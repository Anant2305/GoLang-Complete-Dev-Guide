Go: The Complete Developer's Guide (Golang)


URL - https://www.udemy.com/course/go-the-complete-developers-guide/learn/lecture/7830456#overview

Full Code - https://github.com/StephenGrider/GoCasts

Diagrams - diagrams.net (formerly draw.io).

*********************************
Projects Created for each course content

Getting Started
	hello World
	cards

Structs
	struct

Map
	map

Interface
	interfaces
	http

Channels & Routines
	channels

*********************************

Run Command
go run main.go

Go CLI commands
go build .... - Will build the project
go run .... - will run one or two go scripts
go fmt ... will format all code in current directory
Go install ... Complies and installs a package
go get ... Downloads raw source code of other packages
go test .. runs tstsassociated with current project


package main
Packe is a collection of command code files.
You must delcare same package in each associated packages

Why name package "main"?
Executable files are called "main" to make it run and create a package.

If we used a different name then it will be a library or reusable package to share with colleagues

All Package maned main must have a function also called main()

Import "fmt"
This gives the package access all files in "fmt" folder library

You can also Import other library built by 3 party devs.

https://golonag.org/pkg
List of all standard packages and imports the comes as standard.

Array & Slice

Array - Fixed length
Slice - Like and array but can shrink and grow.

Every Array and Slice must have one perticlar type.


for loop as below
	for i, card := range cards {
		fmt.Println(i, card)
	}

//if you do not wish to use the i then rel=pace it with an undersocre

	for _, suit := range cardSuits {
		for _, value := range cardValues {
			cards = append(cards, suit+" of "+value)
		}
	}

Slicing a Slice
cards[2:5] return 2nd element upto and not incude 5th element

card[:5] return from 0 upto before second element
card[2:] return from 2nd element to end of slice

Returning muliple values from a function

func deal(d deck, handSize int) (deck, deck) {
	return d[:handSize], d[handSize:]
}

the (deck, deck) is returning 2 slices of deck 

how to store the retunred slices

	hand, remaingCards := deal(cards, 5)

	hand.print()
	remaingCards.print()


How to write a test files

all test files must end with _test.go

To run a test file write - go test

Struct
define a Struct
type person struct {
	firstName string
	lastName  string
}

*********************************

Using and saving as a struct
alex := person{"Alex", "Anderson"}
or
alex := person{firstName: "Alex", lastName: "Anderson"}

receiver type is the value key and type after func that will allow you to assign what object is being passed
over to the function and using it like -- slex.print() -- 

func (p person) print() {
	fmt.Printf("%+v", p)
}

you can also assign a type to return like -- string -- 
func (p person) print() string {
	fmt.Printf("%+v", p)
}

PASSBYVALUE
To pass by value you need to understand pointers and RAM 

To create a pointers: -
jimPointer := &jim
//The & is an operator to also pass over the pointer RAM address

using pointers: -
jimPointer.updateName("jimmy")

the above can be done in one lineand GO will do it for you because the function using * will use the addresss
jim.updateName("jimmy")

function using to update an object
func( pointerToPerson *person) updateName(newFirstName string) {
	(*pointerToPerson).firstName = newFirstName
}
// The * is a pointer address and tells go to return the value in that address

*********************************
Using MAPS

When creating a map you must have each key to be the same type and the values to also be the same type.
The Key and Values do not need to be the same type.

creating a map
1 - colors := map[string]string{
	"red": "#ff000",
	"green: "#4bf745,
}

2 - var colors map[string]string //empty map
3 - colors := make(map[string]string) //make/create empty map

assign key and values to empty MAPS
colors["white"] = "#ffffff"

deleting a key:value from a map
delete(colors, "white")

How to itierate through a map

this example will print out the key and value of colors

func printMap(c map[string]string) {
	for color, hex := range c {
		fmt.Println("Hex code for ", color, " is ", hex)
	}
}

color and hex are the key andvlaue in the map.

*********************************
INTERFACE

Interface allows you use one function for each type you have so you no longer need to have
mulitple function witht he exact code in it. 

To declare an Interface

type bot interface {
	getGreeting() string
}

when using the type bot and run a function it will determine what type is being passed over and 
finds any type receiver with getGreeting.

ie enlishBot -> PrintGreeting(b bot)-> uses func (eb englishBot) getGreeting(){}
ie apnishBot -> PrintGreeting(b bot)-> uses func (sb spanishBot) getGreeting(){}

WHen using interface and declaring function youare not restriced to how you define 

type bot interface {
	getGreeting(string, int) (string, error)
	getOther() float
}

you only need to determine the type on values the function passes and/or returns

io.Reader Interface
This will take any data and return it as byte slice []byte to be used in anywhere in you code

//create empty byte slice
bs := make([]byte, 99999)
//Take the resp and store it into the bs byte slice.
resp.Body.Read(bs)	
fmt.Println(string(bs))

//refactor above to one line
io.Copy(os.Stdout, resp.Body)

The above is like
copy(toSomwhere, CopyWhat)

Creating you own writer
func (logWriter) Write(bs []byte) (int, error) { }

using it
lw := logWriter{}
io.Copy(lw, resp.Body)

ROUTINES AND CHANNELS 

WHen you run a main.go it runs a single go Routine and will excecute 1 bloking call at a time.

To enable us to be able to run multiple routines within one is to put the "go" keyword in front of 
the function to be called

	for _, link := range links {
		go checkLink(link)
	}

The go will itierate through the slice and produce multiple routines for each element in the 
struct until it has reached he last value.

Go has a Scheduler and will only run one routine until it reaches a blocking call or finishes using 
only on1 CPU core.

You can run routines
CONCURRENCY - multiple threads executing code. If one thread blocks another one is picked up and worked on.
Only uses One core
PARAALLELISM - Multiple threads executed at the exact time. Requires multiple CPUs

Channels will commnicate between routines in main.go

each go routine is a child routine and is not prioitised by main.go
SO that is why we need to have channels to manage each routine.

Each Channel has a type and must only manage that type string or int...

to create a channel

	c := make(chan string)

Using the channel

	for _, link := range links {
		go checkLink(link, c)
	}

	//fmt.Println(<-c) // recieved meesage after is was used.

	//this will loop thorugh to listen for each item in the links struct
	for i := 0; i < len(links); i++ {
		fmt.Println(<-c)
	}

	func checkLink(link string, c chan string) {
	_, err := http.Get(link)

	if err != nil {
		fmt.Println(link, " might be down")
		c <- "Might be down i think"
		return
	}

	fmt.Println(link, "is up!")
	c <- "Yep ist up" //you can resond as part of the channel
}

Other laternative wasys to use channels

you can run another routine by passing the link as part of the channel values

c <- link //This will send back the link request to be able to run the checkLink again

main() can have a 

//this will run infinite loop to create a new routine once another routine has ended
	for {
		//fmt.Println(<-c)
		go checkLink(<-c, c)
	}

//refactored above
	for l := range c {
		go checkLink(l, c)
	}

func checkLink(link string, c chan string) {
	_, err := http.Get(link)

	if err != nil {
		fmt.Println(link, " might be down")
		//c <- "Might be down i think"
		c <- link //This will send back the link request to be able to run the checkLink again
		return
	}

	fmt.Println(link, "is up!")
	c <- link //This will send back the link request to be able to run the checkLink again
}

You can create a pause in between each rotuin ends
	 time.Sleep(5 * time.Second) will pause for 5 seconds

You need to understand where is the best place to put his code.

//to use time dealy we need to change above as a function litarall
	for l := range c {
		//go checkLink(l, c)

		//to use time sleep we need to change above as a function litarall
		go func(link string) {
			time.Sleep(5 * time.Second)
			checkLink(link, c)
		}(l)
	}









